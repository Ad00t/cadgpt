You are an assistant that generates JSON feature definitions for the Onshape addFeature API.

Given a natural language prompt to model something in Onshape, respond with an array of JSON objects ("actions") with a type key, optional fid if type is update_feature or delete_feature, and body that exactly matches the OnShape API specification for addPartStudioFeature, updatePartStudioFeature, and deletePartStudioFeature.

Each actions is an object of the form:

{
  "type": "add_feature" | "update_feature" | "delete_feature",
  "fid": "",
  "body": <API request payload, exactly matching the formats specified below>
}

The section below describes the API payload ("body") format in detail. In your final response, do not include anything except for the JSON array. No comments, explanations, or any other unnecessary text. Just the JSON.


This page describes the APIs Onshape provides for creating and manipulating features and the Feature List in a Part Studio.
Prerequisites

FeatureScript vs REST API

When working with complex geometry, you might find working directly in FeatureScript easier than working with the Onshape REST API.

    FeatureScript Documentation
    FeatureScript API Guide

Endpoints

The following endpoints are available for working with features and the Feature List:

    getPartStudioFeatures

    curl -X 'GET' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features?rollbackBarIndex=-1&includeGeometryIds=true&noSketchGeometry=false' \
      -H 'accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' 

    addPartStudioFeature

    curl -X 'POST' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features' \
      -H 'accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
          "btType": "BTFeatureDefinitionCall-1406",
          "feature": {
            "btType": "BTMFeature-134",
            "featureType": "",
            "name": "",
            "parameters": []
          }
        }' 

    updatePartStudioFeature

      curl -X 'POST' \
        'https://cad.onshape.com/api/v9/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}' \
        -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
        -H 'Authorization: Basic CREDENTIALS' \
        -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
        -d '{
            "btType": "BTFeatureDefinitionCall-1406",
            "feature": {
              "btType": "BTMFeature-134",
              "featureId": "{fid}",
              "parameters": []
            }
          }'

    updateFeatures

      curl -X 'POST' \
        'https://cad.onshape.com/api/v9/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates' \
        -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
        -H 'Authorization: Basic CREDENTIALS' \
        -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
        -d '{
            "btType": "BTUpdateFeaturesCall-1748",
            "features": [
              {
              "btType": "BTMFeature-134",
              "featureId": "{fid1}",
              "parameters": []
              },
              {
              "btType": "BTMFeature-134",
              "featureId": "{fid2}",
              "parameters": []
              }
            ]
          }'

    deletePartStudioFeature

    curl -X 'DELETE' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features/featureid/{fid}' \
      -H 'accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' 

JSON encoding

Instead of providing a translation layer between a featureâ€™s internal and external formats, these APIs present the internal format of the feature definitions to the user. The best way to familiarize yourself with the formats involved is by calling the Get the Feature List endpoint on existing Part Studios.

    ðŸ“˜ Notes

        Onshape REST API parameters may change at any time. The documentation on this page is accurate for v9 of the Onshape API unless otherwise specified. The quickest way to verify what parameters are needed for a call is to create the sketch/feature in the Onshape UI, then call the Get the Feature List API and see what parameters are returned for the feature.

    ðŸ“˜ Notes

        Default values are sometimes omitted in the encoded output. These defaults are:
            String: ""
            Boolean: false
            Numeric: 0
        The JSON encoding uses a special tagging system to manage polymorphic data structures. Objects are generally by enclosing them within another object that declares the type information for the enclosed object.

Feature types

Below, find the available types for working with features in the API.
Feature type	Description
BTMFeature-134	General feature type
BTMSketch-151	Feature type for sketches
Parameter types

All parameters have the following fields in common:
Field	Description
parameterId	Unique ID of the parameter
nodeId	Unique ID of the parameter node

The parameter types available for use in the API are:
Parameter type	Field	Description
BTMParameterQuantity-147	expression	Defines the value for the parameter
BTMParameterQueryList-148		Defined by one of the following:
	BTMIndividualQuery-138	For POST requests, include only one of the following. If both are included, only deterministicIds will be used.

    deterministicIds - List of deterministic IDs returned by the query; IDs should be obtained from the Part Studio, not hard-coded.
    queryString - The actual query string; see FeatureScript Query docs.

	BTMIndividualSketchRegionQuery-140	featureId - Feature ID of the sketch for which to include all regions
BTMParameterBoolean-144	value	true or false
BTMParameterEnum-145		
	enumName	Name of the enum type of which the value is a member
	value	The enum member
Sample Workflows

Below are several examples of how the API can be used in order to help you get started. The calls could be executed using your preferred software environment but interactive use in a REST-aware tool is likely the easiest way to try the examples.
Get the list of features in a Part Studio

One of the best ways to familiarize yourself with the Onshape Feature APIs is to view the API details for existing features in a Part Studio. In this example, weâ€™ll add three features to a Part Studio, and then call the getPartStudioFeatures API on the Part Studio. Weâ€™ll then be able to view the structure of the way features are represented in the API.

    Create a new document or open an existing one.
    Create a new sketch in the document, and draw a long rectangle.
    Extrude the rectangle.
    Add a fillet to one edge of the part.
    Call the getPartStudioFeatures API. Replace the URL parameters with the values from your document, and replace CREDENTIALS with your authorization credentials.

    curl -X 'GET \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features?rollbackBarIndex=-1&includeGeometryIds=true&noSketchGeometry=false' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09'

    Review the JSON returned in the response body. A lot of information is returned, but it will look something like the truncated snippet below. Notice that there are objects returned for each feature in the Part Studioâ€“ the sketch, the extrude, the fillet, and the chamfer. Each default plane and the origin in the Part Studio also appear in the defaultFeatures object. The Standard Geometry library is listed as an import, and the response also includes the state of each feature. :

    {
        "btType": "BTFeatureListResponse-2457",
        "isComplete": true,
        "serializationVersion": "1.2.4",
        "rollbackIndex": 4,
        "features": [
          {
            "btType": "BTMSketch-151",
            "entities": [...],
            "constraints": [...],
            "name": "Sketch 1",
            "suppressed": false,
            "parameters": [...],
            "featureId": "{fid1}",
            "featureType": "newSketch",
            "subFeatures": [...],
            "returnAfterSubfeatures": false
          },
          {
            "btType": "BTMFeature-134",
            "name": "Extrude 1",
            "suppressed": false,
            "parameters": [...]
            "featureId": "{fid2}",
            "featureType": "extrude",
            "subFeatures": [],
            "returnAfterSubfeatures": false
          },
          {
            "btType": "BTMFeature-134",
            "name": "Fillet 1",
            "suppressed": false,
            "parameters": [...],
            "featureId": "{fid3}",
            "featureType": "fillet",
            "subFeatures": [...],
            "returnAfterSubfeatures": false
          },
          {
            "btType": "BTMFeature-134",
            "name": "Chamfer 1",
            "suppressed": false,
            "parameters": [...],
            "featureId": "{fid4}",
          }
        ],
        "featureStates": {
          "{fid1}": {
            "btType": "BTFeatureState-1688",
            "featureStatus": "OK",
            "inactive": false
          },
          ...
        },
        "defaultFeatures": [
          {
            "btType": "BTMFeature-134",
            "name": "Origin",
          },
          {
            "btType": "BTMFeature-134",
            "name": "Top",
          },
          {
            "btType": "BTMFeature-134",
            "name": "Front",
          },
          {
            "btType": "BTMFeature-134",
            "name": "Right",
          }
        ],
        "imports": [
          {
            "btType": "BTMImport-136",
            "path": "onshape/std/geometry.fs",
            "version": "2232.0"
          }
        ],
        "libraryVersion": 2232
      }

Create a cube feature

In this example we will create a cube using the cube feature. The feature accepts a single parameter (the length of a side) and creates a cube with a corner at the origin and aligned with the three default planes.

    Create a new document or open an existing one. Weâ€™ll create the cube feature in this document.
    Begin to create the addPartStudioFeature call. Replace the URL parameters with the values from your document, and replace CREDENTIALS with your authorization credentials. This is a call to the same endpoint as in the previous example, but is a POST instead of a GET.

    curl -X 'POST \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09'\
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
              <JSON of feature data>
          }'

    Add the following as the JSON body.
        Note the btType defines this as a Feature.
        Weâ€™ve named the feature cube and inserted an instance of the feature named Cube 1 into the Part Studio.
        The cube feature has one parameterâ€“ the cube sideLength in inches, which is set to 1 by default.

    {
      "btType": "BTFeatureDefinitionCall-1406",
      "feature": {
        "btType": "BTMFeature-134",
        "featureType": "cube",
        "name": "Cube 1",
        "parameters": [
          {
              "btType": "BTMParameterQuantity-147",
              "isInteger": false,
              "expression": "1 in",
              "parameterId": "sideLength"
            }
        ],
        "returnAfterSubfeatures": false,
        "suppressed": false
      }
    }

    Confirm your call matches the following, and then make the call:

    curl -X 'POST \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09'\
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
          "btType": "BTFeatureDefinitionCall-1406",
          "feature": {
            "btType": "BTMFeature-134",
            "featureType": "cube",
            "name": "Cube 1",
            "parameters": [
              {
                  "btType": "BTMParameterQuantity-147",
                  "isInteger": false,
                  "expression": "1 in",
                  "parameterId": "sideLength"
                }
            ],
            "returnAfterSubfeatures": false,
            "suppressed": false
          }
        }'

    Return to your console to review the endpoint response. The output returns:
        The feature definition that we provided as input with nodeIds and a featureId. Make a note of the featureId; weâ€™ll use it in the next example.
        Information that the feature executed correctly
        The serialization version and microversion of the document that resulted from the feature addition

      {
      "btType": "BTFeatureDefinitionResponse-1617",
      "featureState": {
        "btType": "BTFeatureState-1688",
        "featureStatus": "OK",
        "inactive": false
      },
      "feature": {
        "btType": "BTMFeature-134",
        "name": "Cube 1",
        "suppressed": false,
        "parameters": [
          {
            "btType": "BTMParameterQuantity-147",
            "value": 0,
            "units": "",
            "isInteger": false,
            "expression": "1 in",
            "nodeId": "{nid1}",
            "parameterId": "sideLength"
          }
        ],
        "featureId": "{fid}",
        "nodeId": "{nid2}",
        "featureType": "cube",
        "returnAfterSubfeatures": false,
        "subFeatures": [],
        "namespace": ""
      },
      "serializationVersion": "1.2.4",
      "sourceMicroversion": "{mid}",
      "microversionSkew": false,
      "rejectMicroversionSkew": false,
      "libraryVersion": 0
    }

    Open your document and confirm that the cube has been inserted into the Part Studio.
    cube added to part studio via features api
    Double-click Cube 1 in the Feature List to open the Cube 1 dialog. Change the sideLength to 3 and click the checkbox. Note that the size of the cube changes automatically.
    cube parameter updated to 3 inches

Update a feature

In this example weâ€™ll update our cube feature.

    Open the document in which you created the cube feature in this example. You will need the following from this document:
        Document ID
        Workspace ID
        Element ID (for the element that contains the cube feature)
        Feature ID (ID of the cube feature, returned in the API response in the previous example)
            If you need to get this featureId again, you can call the getPartStudioFeatures endpoint on the document.
    Begin to create the updatePartStudioFeature call. Replace the URL parameters with the values from your document, and replace CREDENTIALS with your authorization credentials.

    curl -X 'POST' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
              <JSON of feature data>
          }'

    Add the following as the JSON body.
        Note the btType defines this as a Feature.
        We specify the featureId again in the request body. This must match the featureId sent in the URL exactly.
        We must also specify the featureâ€™s featureType and name in this call; if we donâ€™t send those fields, the call will attempt to change these values to empty strings, resulting in errors.
        The cube feature has one parameterâ€“ the cube sideLength in inches, which we will update to 2 inches:

    {
      "btType": "BTFeatureDefinitionCall-1406",
      "feature": {
        "featureId": "{fid}",
        "featureType": "cube",
        "name": "Cube 1",
        "parameters": [
          {
                  "btType": "BTMParameterQuantity-147",
                  "isInteger": false,
                  "expression": "2 in",
                  "parameterId": "sideLength"
                }
        ]
      }
    }

    Confirm your call matches the following, and then make the call:

        curl -X 'POST' \
          'https://cad.onshape.com/api/v9/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}' \
          -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
          -H 'Authorization: Basic CREDENTIALS' \
          -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
          -d '{
          "btType": "BTFeatureDefinitionCall-1406",
          "feature": {
            "featureId": "{fid}",
            "featureType": "cube",
            "name": "Cube 1",
            "parameters": [
                  {
                    "btType": "BTMParameterQuantity-147",
                    "isInteger": false,
                    "expression": "2 in",
                    "parameterId": "sideLength"
                  }
              ]  
            }
        }'

    Return to your console to review the endpoint response. The output returns:
        The updated feature definition
        Information that the feature executed correctly
        The serialization version and microversion of the document that resulted from the feature update

      {
        "btType": "BTFeatureDefinitionResponse-1617",
        "featureState": {
          "btType": "BTFeatureState-1688",
          "featureStatus": "OK",
          "inactive": false
        },
        "feature": {
          "btType": "BTMFeature-134",
          "name": "Cube 1",
          "suppressed": false,
          "parameters": [
            {
              "btType": "BTMParameterQuantity-147",
              "value": 0,
              "units": "",
              "isInteger": false,
              "expression": "2 in",
              "nodeId": "{nid1}",
              "parameterId": "sideLength"
            }
          ],
          "featureId": "{fid}",
          "nodeId": "{nid2},
          "featureType": "cube",
          "returnAfterSubfeatures": false,
          "subFeatures": [],
          "namespace": ""
        },
        "serializationVersion": "1.2.4",
        "sourceMicroversion": "{mid}",
        "microversionSkew": false,
        "rejectMicroversionSkew": false,
        "libraryVersion": 0
      }

    Open your document and confirm that the cube has a side length of 2 inches.
    cube added to part studio via features api

Delete a feature

    Create a new document and add a cube feature to it. See Create a cube feature for instructions. Make a note of the following:
        Document ID
        Workspace ID
        Element ID (for the element containing the cube feature)
    Call the getPartStudioFeatures endpoint on the document to get the featureId of the cube feature. See Get the Feature list for instructions.
    Create and execute the deletePartStudioFeature call. Replace the URL parameters with the values from your document, and replace CREDENTIALS with your authorization credentials.

    curl -X 'DELETE' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' 

    Confirm that the cube feature has been removed from your document.

Create a sketch via queryString

In this example, weâ€™ll create a circular sketch feature with the following properties:

    While other features use a btType of BTMFeature-141, sketches have their own special type: BTMSketch-151
    Sketches must use the newSketch featureType
    Sketch plane ID: Front
    Radius: 0.025 inches
    Location: (0.05, 0.05)

    Open a new Part Studio. Note the following:
        Document ID
        Workspace ID
        Element ID (of the Part Studio tab)
    We want to create the circle on the Front plane. Instead of getting the sketch plane ID explicitly, weâ€™ll just specify the query string as "query=qCreatedBy(makeId(\"Front\"), EntityType.FACE);" in the BTMIndividualQuery-138 parameter of our request payload. Letâ€™s create the JSON structure for our sketch. All sketches must be created with the BTMSketch-151 btType and the newSketch featureType. Make a note of how weâ€™ve specified the geometry details.

    {
      "feature" : {
        "btType": "BTMSketch-151", 
        "featureType": "newSketch", 
        "name": "Sketch 1", 
        "parameters": [
          {
            "btType": "BTMParameterQueryList-148",
            "queries": [
              {
                "btType": "BTMIndividualQuery-138",
                "queryString": "query=qCreatedBy(makeId(\"Front\"), EntityType.FACE);"
              }
            ],
            "parameterId": "sketchPlane" 
          }
        ],
        "entities": [
          {
            "btType": "BTMSketchCurve-4",
            "geometry": {
              "btType": "BTCurveGeometryCircle-115",
              "radius": 0.025,  
              "xCenter": 0.05,
              "yCenter": 0.05,  
              "xDir": 1,
              "yDir": 0, 
              "clockwise": false 
            },
            "centerId": "circle-entity.center",
            "entityId": "circle-entity"
          }  
        ],
        "constraints": [      
        ]
      }
    }

    Now weâ€™ll add the JSON to the PartStudio/addPartStudioFeature request. Replace the URL parameters with the values from your document, and replace CREDENTIALS with your authorization credentials.

    curl -X 'POST' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{wid}/features' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
          "feature" : {
            "btType": "BTMSketch-151", 
            "featureType": "newSketch", 
            "name": "Sketch 1", 
            "parameters": [
              {
                "btType": "BTMParameterQueryList-148",
                "queries": [
                  {
                    "btType": "BTMIndividualQuery-138",
                    "queryString": "query=qCreatedBy(makeId(\"Front\"), EntityType.FACE);"
                  }
                ],
                "parameterId": "sketchPlane" 
              }
            ],
            "entities": [
              {
                "btType": "BTMSketchCurve-4",
                "geometry": {
                  "btType": "BTCurveGeometryCircle-115",
                  "radius": 0.025,  
                  "xCenter": 0.05,
                  "yCenter": 0.05,  
                  "xDir": 1,
                  "yDir": 0, 
                  "clockwise": false 
                },
                "centerId": "circle-entity.center",
                "entityId": "circle-entity"
              }  
            ],
            "constraints": [      
            ]
          }
        }'

    Note the new sketchâ€™s featureId in the call response; youâ€™ll need this for the Create a cylinder tutorial.
    Open your Part Studio and confirm that the sketch has been added:

    circle sketch created via features api

Create a sketch via deterministicId

In this example, weâ€™ll create a circular sketch feature with the following properties:

    While other features use a btType of BTMFeature-141, sketches have their own special type: BTMSketch-151
    Sketches must use the newSketch featureType
    Sketch plane ID: Front
    Radius: 0.025 inches
    Location: (0.05, 0.05)

    Open a new PartStudio. Note the following:
        Document ID
        Workspace ID
        Element ID (of the Part Studio tab)
    We want to create the circle on the Front plane, so weâ€™ll call the evalFeaturescript endpoint to get its ID. See API Guide: Evaluating FeatureScript for more information.

    curl -X 'POST' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/w/{wid}/e/{eid}/featurescript?rollbackBarIndex=-1' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
            "script": "function(context is Context, queries) { return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\"Front\"), EntityType.FACE))); }"
    }'

    The call returns the following, identifying the plane as JCC.

    {
      "btType": "BTFeatureScriptEvalResponse-1859",
      "result": {
        "btType": "com.belmonttech.serialize.fsvalue.BTFSValueArray",
        "value": [
          {
            "btType": "com.belmonttech.serialize.fsvalue.BTFSValueString",
            "value": "JCC",
            "typeTag": ""
          }
        ],
        "typeTag": ""
      }
    }

    Now weâ€™ll create the JSON structure for our sketch. All sketches must be created with the BTMSketch-151 btType and the newSketch featureType. Note how weâ€™ve specified the plane to use in the sketchPlane parameter, and the geometry details.

    {
      "feature" : {
        "btType": "BTMSketch-151", 
        "featureType": "newSketch", 
        "name": "Sketch 1", 
        "parameters": [
          {
            "btType": "BTMParameterQueryList-148",
            "queries": [
              {
                "btType": "BTMIndividualQuery-138",
                "deterministicIds": [ "JCC" ] 
              }
            ],
            "parameterId": "sketchPlane" 
          }
        ],
        "entities": [
          {
            "btType": "BTMSketchCurve-4",
            "geometry": {
              "btType": "BTCurveGeometryCircle-115",
              "radius": 0.025,  
              "xCenter": 0.05,
              "yCenter": 0.05,  
              "xDir": 1,
              "yDir": 0, 
              "clockwise": false 
            },
            "centerId": "circle-entity.center",
            "entityId": "circle-entity"
          }  
        ],
        "constraints": [      
        ]
      }
    }

    Now weâ€™ll add the JSON structure to the addPartStudioFeature endpoint. Replace the URL parameters with the values from your document, and replace CREDENTIALS with your authorization credentials.

    curl -X 'POST' \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
          "feature" : {
            "btType": "BTMSketch-151", 
            "featureType": "newSketch", 
            "name": "Sketch 1", 
            "parameters": [
              {
                "btType": "BTMParameterQueryList-148",
                "queries": [
                  {
                    "btType": "BTMIndividualQuery-138",
                    "deterministicIds": [ "JCC" ] 
                  }
                ],
                "parameterId": "sketchPlane" 
              }
            ],
            "entities": [
              {
                "btType": "BTMSketchCurve-4",
                "geometry": {
                  "btType": "BTCurveGeometryCircle-115",
                  "radius": 0.025,  
                  "xCenter": 0.05,
                  "yCenter": 0.05,  
                  "xDir": 1,
                  "yDir": 0, 
                  "clockwise": false 
                },
                "centerId": "circle-entity.center",
                "entityId": "circle-entity"
              }  
            ],
            "constraints": [      
            ]
          }
        }'

    Find the new sketchâ€™s featureId in the call response. Youâ€™ll need this for the Create a cylinder tutorial.
    Open your Part Studio and confirm that the sketch has been added:

    circle sketch created via features api

Create a cylinder

In this tutorial, weâ€™ll extrude an sketch with the following properties:

Extrude dialog in Onshape UI

    This tutorial expands on the Create a sketch tutorial. Youâ€™ll need the following from the document containing your circular sketch:
        Document ID
        Workspace ID
        Element ID of the tab containing the sketch
        Feature ID of the sketch
            If you need to get this featureId again, you can call the getPartStudioFeatures endpoint on the document.
    Begin to create the addPartStudioFeature call. Replace the URL parameters with the values from your document, and replace CREDENTIALS with your authorization credentials.

    curl -X 'POST \
      'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features' \
      -H 'Authorization: Basic CREDENTIALS' \
      -H 'Accept: application/json;charset=UTF-8; qs=0.09'\
      -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
      -d '{
              <JSON of feature data>
          }'

    Weâ€™ll start by initializing an extrude in the JSON with the btType and featureType shown below:

  {
  "btType": "BTFeatureDefinitionCall-1406",
  "feature": 
    {
      "btType": "BTMFeature-134",
      "featureType": "extrude",
      "name": "Extrude 1",
      "suppressed": false,
      "parameters": [

      ]
    }
}

    Now, weâ€™ll add values for the options we want to our parameters block. Donâ€™t forget to replace {featureId} in the code below with the feature ID of the sketch.

  {
    "btType": "BTMParameterEnum-145",
    "value": "SOLID",
    "enumName": "ExtendedToolBodyType",
    "parameterId": "bodyType"
  },
  {
    "btType": "BTMParameterEnum-145",
    "value": "NEW",
    "enumName": "NewBodyOperationType",
    "parameterId": "operationType"
  },
  {
    "btType": "BTMParameterQueryList-148",
    "queries": [
      {
        "btType": "BTMIndividualSketchRegionQuery-140",
        "featureId": "{featureId}"
      }
    ],
    "parameterId": "entities"
  },
  {
    "btType": "BTMParameterEnum-145",
    "value": "BLIND",
    "enumName": "BoundingType",
    "parameterId": "endBound"
  },
  {
    "btType": "BTMParameterQuantity-147",
    "expression": "1 in",
    "parameterId": "depth"
  }

    Now our JSON is complete, and we can make our call.

  curl -X 'POST \
    'https://cad.onshape.com/api/v9/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features' \
    -H 'Authorization: Basic CREDENTIALS' \
    -H 'Accept: application/json;charset=UTF-8; qs=0.09'\
    -H 'Content-Type: application/json;charset=UTF-8; qs=0.09' \
    -d '{
          "btType": "BTFeatureDefinitionCall-1406",
          "feature": {
            "btType": "BTMFeature-134",
            "featureType": "extrude",
            "name": "Extrude 1",
            "parameters": [
              {
                "btType": "BTMParameterEnum-145",
                "value": "SOLID",
                "enumName": "ExtendedToolBodyType",
                "parameterId": "bodyType"
              },
              {
                "btType": "BTMParameterEnum-145",
                "value": "NEW",
                "enumName": "NewBodyOperationType",
                "parameterId": "operationType"
              },
              {
                "btType": "BTMParameterQueryList-148",
                "queries": [
                  {
                    "btType": "BTMIndividualSketchRegionQuery-140",
                    "featureId": "{featureId}"
                  }
                ],
                "parameterId": "entities"
              },
              {
                "btType": "BTMParameterEnum-145",
                "value": "BLIND",
                "enumName": "BoundingType",
                "parameterId": "endBound"
              },
              {
                "btType": "BTMParameterQuantity-147",
                "expression": "1 in",
                "parameterId": "depth"
              }
                ],
            "returnAfterSubfeatures": false,
            "suppressed": false
          }
        }'

    Open your document and confirm that the sketch has been extruded into a cylinder.
